//computes positions for new blocks slightly shifting probabilities
//this is an old version
class Unrandomizer{
    field LCGenerator random;
    field int unrandomFactor;
    field int totalSum;
    field int screenWidth;
    field Array probabilityArr;
    field int bitmask;

    constructor Unrandomizer new(int factor, int newRandom, int scrWidth, int scrHeigth){
        var int i;
        let random = newRandom;
        let unrandomFactor = factor;
        let screenWidth = scrWidth;
        let totalSum = (scrWidth * scrHeigth * factor);// + scrWidth;
        //let bitmask = -512;
        let probabilityArr = Array.new(screenWidth);
        let i = 0;
        while (i < screenWidth){
            let probabilityArr[i] = (scrHeigth * factor);
            let i = i + 1;
        }
        return this;
    }

    method LCGenerator getLCG(){
        return random;
    }

    method void setLCG(LCGenerator newRandom){
        do random.dispose();
        let random = newRandom;
        return;
    }

    method int getFactor(){
        return unrandomFactor;
    }

    method void setFactor(int factor){
        let unrandomFactor = factor;
        return;
    }

    method void correctForDeletedRow(){
        var int i;
        let i = 0;
        while (i < screenWidth){
            let probabilityArr[i] = probabilityArr[i] + unrandomFactor;
            let i = i + 1;
        }
        let totalSum = totalSum + (screenWidth * unrandomFactor);
        return;
    }

    method int computeNextPos(){
        var int randomBlockPos;
        var int index;
        var bool isNotFound;
        let randomBlockPos = random.nextInt() / 128;
        let randomBlockPos = randomBlockPos - (totalSum * (randomBlockPos / totalSum));
        let index = 0;
        let isNotFound = true;
        while (isNotFound){
            if (index = screenWidth){
                let index = index - 1;
                let isNotFound = false;
            }else{
                if (~(randomBlockPos < probabilityArr[index])){
                    let randomBlockPos = randomBlockPos - probabilityArr[index];
                    let index = index + 1;
                }else{
                    let isNotFound = false;
                }
            }
        }
        //do Output.printInt(index);
        return index;
    }

    method void correctForNewBlock(int index){
        let totalSum = totalSum - unrandomFactor;
        let probabilityArr[index] = probabilityArr[index] - unrandomFactor;
        return;
    }

    method void dispose(){
        do random.dispose();
        do probabilityArr.dispose();
        do Memory.deAlloc(this);
        return;
    }
}