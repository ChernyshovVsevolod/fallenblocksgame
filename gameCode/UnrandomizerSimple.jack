//computes positions for new blocks slightly shifting probabilities
class UnrandomizerSimple{
    field LCGenerator random;
    field int screenWidth;
    field Array probabilityArr;

    constructor UnrandomizerSimple new(int newRandom, int scrWidth){
        var int i;
        let random = newRandom;
        let screenWidth = scrWidth;
        let probabilityArr = Array.new(screenWidth);
        let i = 0;
        while (i < screenWidth){
            let probabilityArr[i] = 1;
            let i = i + 1;
        }
        return this;
    }

    method LCGenerator getLCG(){
        return random;
    }

    method void setLCG(LCGenerator newRandom){
        do random.dispose();
        let random = newRandom;
        return;
    }

    method void correctForDeletedRow(){
        var int i;
        let i = 0;
        while (i < screenWidth){
            let probabilityArr[i] = probabilityArr[i] - 1;
            let i = i + 1;
        }
        return;
    }

    method int computeNextPos(){
        var int randomBlockPos;
        var int i;
        var int improbability;
        var int impossibleNum;
        let randomBlockPos = (random.nextInt() & 16383) / 128;
        let randomBlockPos = randomBlockPos - (screenWidth * (randomBlockPos / screenWidth));
        let improbability = ((random.nextInt() & 16383) / 128);
        let impossibleNum = probabilityArr[randomBlockPos];
        let improbability = improbability - (impossibleNum * (improbability / impossibleNum));
        if (~(improbability = 0)){
            let randomBlockPos = -1;
        }
        return randomBlockPos;
    }

    method void correctForNewBlock(int index){
        let probabilityArr[index] = probabilityArr[index] + 1;
        return;
    }

    method void correctForCollectedBlock(int index){
        let probabilityArr[index] = probabilityArr[index] - 1;
        return;
    }

    method void dispose(){
        do random.dispose();
        do probabilityArr.dispose();
        do Memory.deAlloc(this);
        return;
    }
}