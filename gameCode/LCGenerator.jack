//linear congruent generator
//learn more https://en.wikipedia.org/wiki/Linear_congruential_generator
//
//generates non-negative pseudo-random numbers of "low quality"
//example of "low quality" : even and odd nums are strictly alternating(in my vertion)
//like this : e, o, e, o, e, o, e, o, ...
class LCGenerator{
    field int x0;
    field int xn;
    field int a;
    field int c;
    field int m;

    /**Creates a generator using standard multiplier and increment
    first is a key(a true random factor)*/
    constructor LCGenerator new(int first){
        let x0 = first;
        let xn = x0;
        let a = 421;
        let c = 1663;
        let m = 32767;
        return this;
    }

    /**this is a simple version, so instead of division i use bitwise and.
        please, take this into account*/
    constructor LCGenerator newCustom(int first, int mult, int incr, int bitmask){
        let x0 = first;
        let xn = first;
        let a = mult;
        let c = incr;
        let m = bitmask;
        return this;
    }

    method int nextInt(){
        let xn = ((a * xn) + c) & m;
        return xn;
    }

    method void reset(){
        let xn = x0;
        return;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}