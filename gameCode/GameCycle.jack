class GameCycle{
    field bool gameIsNotFinished;
    field int blockMovementPeriod;
    field int blockMovementTicks;
    //field int blockDelay;
    field int newBlockPeriod;
    field int newBlockTicks;

    field int standartTickDelay;
    field int screenWidth;
    field int screenHeigth;
    
    //field int bitmask;
    
    field UnrandomizerSimple unrandom;
    field LCGenerator random;
    field Array blockArr;
    field Player player;
    field PlayerMovement playerMove;

    constructor GameCycle new(){
        var int i, j;
        var Array bufferArr;
        //let bitmask = 15872; //0001111100000???
        //let blockDelay = 0;
        let blockMovementPeriod = 20;
        let blockMovementTicks = 0;
        let standartTickDelay = 3;
        let screenWidth = 10;   //
        let screenHeigth = 6;   //
        let gameIsNotFinished = true;
        let newBlockPeriod = 70;
        let newBlockTicks = 0;
        let blockArr = Array.new(screenHeigth);
        let player = Player.new(0, 0, 51, 30, 60, 3);
        let playerMove = PlayerMovement.new(player, blockArr, (254/6), (510/10));
        let i = 0;
        while (i < screenHeigth){
            let bufferArr = Array.new(screenWidth);
            let blockArr[i] = bufferArr;
            let j = 0;
            while (j < screenWidth){
                let bufferArr[j] = 0;
                let j = j + 1;
            }
            let i = i + 1;
        }
        
        let random = LCGenerator.new(7394);
        let unrandom = UnrandomizerSimple.new(1, random, screenWidth, screenHeigth);
        return this;
    }

    method void game(){
        var Array upRow, downRow;
        var int rowNum, columnNum;
        var Block blockBuffer;
        var bool isRowComplete;
        var int randomBlockPos;
        var char key;
        var Point playerCoords;
        while (gameIsNotFinished){
            //try move blocks
            if (blockMovementTicks > blockMovementPeriod){
                let blockMovementTicks = 0;
                let rowNum = screenHeigth - 2;
                let downRow = blockArr[screenHeigth - 1];
                //check if blocks can fall
                while (rowNum > -1){
                    let upRow = blockArr[rowNum];
                    let columnNum = screenWidth - 1;
                    //move blocks
                    while (columnNum > -1){
                        if (~(upRow[columnNum] = 0)){
                            if (downRow[columnNum] = 0){
                                let blockBuffer = upRow[columnNum];
                                let upRow[columnNum] = 0;
                                let downRow[columnNum] = blockBuffer;
                                do blockBuffer.erase();
                                do blockBuffer.moveDown();
                                do blockBuffer.draw();
                            }
                        }
                        let columnNum = columnNum - 1;
                    }
                    //check down row completeness and erase if so
                    let columnNum = 0;
                    let isRowComplete = true;
                    while (columnNum < screenWidth){
                        if (downRow[columnNum] = 0){
                            let isRowComplete = false;
                        }
                        let columnNum = columnNum + 1;
                    }
                    if (isRowComplete){
                        let columnNum = 0;
                        while (columnNum < screenWidth){
                            let blockBuffer = downRow[columnNum];
                            let downRow[columnNum] = 0;
                            do blockBuffer.erase();
                            do blockBuffer.dispose();
                            let columnNum = columnNum + 1;
                        }
                        do unrandom.correctForDeletedRow();
                    }

                    let downRow = upRow;
                    let rowNum = rowNum - 1;
                }
                
                
            }
            //add random block
            if (newBlockTicks > newBlockPeriod){
                //try add new blocks
                let randomBlockPos = unrandom.computeNextPos();
                let upRow = blockArr[0];
                if (randomBlockPos > -1){
                    if (upRow[randomBlockPos] = 0){
                        let blockBuffer = Block.new(51 * randomBlockPos, 0);
                        let upRow[randomBlockPos] = blockBuffer;
                        do blockBuffer.draw();
                        do unrandom.correctForNewBlock(randomBlockPos);
                    }
                    let newBlockTicks = 0;
                }
            }
            //try move player
            do playerMove.execute();

            //move timers
            let blockMovementTicks = blockMovementTicks + 1;
            let newBlockTicks = newBlockTicks + 1;
            //controle the time flow
            do Sys.wait(standartTickDelay);
        }
        //dispose something? nope
        return;
    }

    method void dispose(){
        var int i;
        var Array a;
        let i = 0;
        while (i < screenWidth){
            let a = blockArr[i];
            do a.dispose();
        }
        do blockArr.dispose();
        do Memory.deAlloc(this);
        return;
    }
}